prefix operator -
infix operator + 3 right
infix operator - 3 right
infix operator * 4 right
infix operator == 2 right
infix operator != 2 right
infix operator > 2 right
infix operator < 2 right
infix operator >= 2 right
infix operator <= 2 right

@foreign("printInt") func printInt(num: Int)
@foreign("printInt") func printUInt(num: UInt)
@foreign("print") func print(str: String)
class IntWrapper {
  let a: Int
}
struct Block {
  var size: UInt32
  var nextBlockAddr: UInt32
  var flag: UInt32
}
var brk: UInt32 = HEAP_START
var headAddr: UInt32 = 0
var tailAddr: UInt32 = 0
func getFreeBlock(size: UInt32): UInt32 {
  var currentAddr = headAddr
  var current = Pointer<Block>(currentAddr).load()
  while currentAddr != 0 {
    if current.flag > 0 {
      if current.size >= size {
        return currentAddr
      }
    }
    currentAddr = current.nextBlockAddr
    current = Pointer<Block>(currentAddr).load()
  }
  return 0
}
@compile func malloc(size: UInt32): UInt32 {
  if size == 0 {
    return 0
  }
  let addr = getFreeBlock(size)
  if addr != 0 {
    var block = Pointer<Block>(addr).load()
    block.flag = 0
    Pointer<Block>(addr).store(block)
    return addr + 12
  }
  let totalSize = 12 + size
  brk = brk + totalSize
  let header = Block(size, 0, 0)
  if headAddr == 0 {
    headAddr = brk
  }
  if tailAddr != 0 {
    var tail = Pointer<Block>(tailAddr).load()
    tail.nextBlockAddr = brk
    Pointer<Block>(tailAddr).store(tail)
  }
  tailAddr = brk
  return brk + 12
}
@compile func free(ptr: UInt32) {
  let headerPtr = ptr - 12
  var header = Pointer<Block>(headerPtr).load()
  header.flag = 1
  Pointer<Block>(headerPtr).store(header)
}

let q = IntWrapper(21)
print("Hello World")